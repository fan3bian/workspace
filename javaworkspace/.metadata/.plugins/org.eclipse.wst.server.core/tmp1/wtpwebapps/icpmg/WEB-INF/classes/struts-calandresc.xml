<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.1//EN" "http://struts.apache.org/dtds/struts-2.1.dtd">
<struts>
	<!-- 资源管理云服务器  -->
	<package name="instance" namespace="/instance" extends="json-default">
		<interceptors>
			<!-- 定义系统的登录控制拦截器 -->
			<interceptor name="nosessInterceptor" class="com.inspur.icpmg.interceptor.LoginInterceptor"></interceptor>
			<interceptor-stack name="uuStack">
				<interceptor-ref name="paramsPrepareParamsStack">
            		<param name="prepare.alwaysInvokePrepare">false</param>
        		</interceptor-ref>
				<!-- 引用登录控制拦截器 -->
				<interceptor-ref name="nosessInterceptor"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<!-- 将自定义的拦截器uuStack定义成默认的拦截器栈 -->
		<default-interceptor-ref name="uuStack"></default-interceptor-ref>
		<global-results>
			<result name="noSession">/login.jsp</result>
			<result name="null">/login.jsp</result>
		</global-results>

		<action name="storageOperMonitor" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="storageOperMonitor">
			<result name="storageOperMonitor">/web/calAndResc/storage/storageMonitor.jsp</result>
		</action>

		
		<action name="getAllInstances" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="getAllInstances"></action> 
		<action name="operMonitor" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="operMonitor">
			<result name="operMonitor">/web/calAndResc/instanceMgr/csOperMonitor.jsp</result>
		</action>
		<action name="getAllDisksForInstance" class="com.inspur.icpmg.calAndResc.instance.action.CloudStorageMgrAction" method="getAllDisksForInstance"></action>
		<action name="getOperSys" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="getOperSys"></action>
		
		<!-- VM详情 -->
		<action name="getInstanceDetail" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="getInstanceDetail">
			<result name="csInstDetailVo">/web/calAndResc/instanceMgr/instanceDetail.jsp</result>
		</action>
		
		<!-- 宿主机运行监控 -->
		<action name="hostingOperMonitor" class="com.inspur.icpmg.resourceMg.action.HostMgrAction" method="hostingOperMonitor">
			<result name="hostingOperMonitor">/web/calAndResc/host/hostingOperMonitor.jsp</result>
		</action>
		<!-- excel模板下载 -->
		<action name="downloadExcel" class="com.inspur.icpmg.calAndResc.instance.action.ImportExcelAction" method="downloadExcel"></action>
		<!-- 云服务器信息导入 -->
		<action name="infoImportVM" class="com.inspur.icpmg.calAndResc.instance.action.ImportExcelAction" method="infoImportVM"></action>


	</package>
	
	<package name="csopermintor" namespace="/opermintor" extends="json-default">
		<interceptors>
			<!-- 定义系统的登录控制拦截器 -->
			<interceptor name="nosessInterceptor" class="com.inspur.icpmg.interceptor.LoginInterceptor"></interceptor>
			<interceptor-stack name="uuStack">
				<interceptor-ref name="paramsPrepareParamsStack">
            		<param name="prepare.alwaysInvokePrepare">false</param>
        		</interceptor-ref>
				<!-- 引用登录控制拦截器 -->
				<interceptor-ref name="nosessInterceptor"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<!-- 将自定义的拦截器uuStack定义成默认的拦截器栈 -->
		<default-interceptor-ref name="uuStack"></default-interceptor-ref>
		<global-results>
			<result name="noSession">/login.jsp</result>
			<result name="null">/login.jsp</result>
		</global-results>
		
		<action name="cpuUsage" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="cpuUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		<action name="memUsage" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="memUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		<action name="diskUsage" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="diskUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		<action name="memCapacityStat" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="memCapacityStat">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		<action name="diskCapacityStat" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="diskCapacityStat">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		
		<!-- 宿主机的运行监控 -->
		<action name="hostCPUUsage" class="com.inspur.icpmg.calAndResc.instance.action.HostOperMonitorMgrAction" method="hostCPUUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		
		<action name="hostMemUsage" class="com.inspur.icpmg.calAndResc.instance.action.HostOperMonitorMgrAction" method="hostMemUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		<action name="hostMemCapacityStat" class="com.inspur.icpmg.calAndResc.instance.action.HostOperMonitorMgrAction" method="hostMemCapacityStat">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>


		<!-- 互联网资源池监控 -->
		<action name="hlwPoolCPUData" class="com.inspur.icpmg.calAndResc.instance.action.RescPoolDashboardAction" method="hlwPoolCPUData">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>
		
	</package>
	
	<package name="rescpoolmgr" namespace="/rescpool" extends="json-default">
		<interceptors>
			<!-- 定义系统的登录控制拦截器 -->
			<interceptor name="nosessInterceptor" class="com.inspur.icpmg.interceptor.LoginInterceptor"></interceptor>
			<interceptor-stack name="uuStack">
				<interceptor-ref name="paramsPrepareParamsStack">
            		<param name="prepare.alwaysInvokePrepare">false</param>
        		</interceptor-ref>
				<!-- 引用登录控制拦截器 -->
				<interceptor-ref name="nosessInterceptor"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<!-- 将自定义的拦截器uuStack定义成默认的拦截器栈 -->
		<default-interceptor-ref name="uuStack"></default-interceptor-ref>
		<global-results>
			<result name="noSession">/login.jsp</result>
			<result name="null">/login.jsp</result>
		</global-results>
		
		<action name="getHLWHosts" class="com.inspur.icpmg.calAndResc.instance.action.RescPoolDashboardAction" method="getHLWHosts"></action>
		
	</package>

	<package name="storageOpermintor" namespace="/stOpermintor" extends="json-default">
		<interceptors>
			<!-- 定义系统的登录控制拦截器 -->
			<interceptor name="nosessInterceptor" class="com.inspur.icpmg.interceptor.LoginInterceptor"></interceptor>
			<interceptor-stack name="uuStack">
				<interceptor-ref name="paramsPrepareParamsStack">
					<param name="prepare.alwaysInvokePrepare">false</param>
				</interceptor-ref>
				<!-- 引用登录控制拦截器 -->
				<interceptor-ref name="nosessInterceptor"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<!-- 将自定义的拦截器uuStack定义成默认的拦截器栈 -->
		<default-interceptor-ref name="uuStack"></default-interceptor-ref>
		<global-results>
			<result name="noSession">/login.jsp</result>
			<result name="null">/login.jsp</result>
		</global-results>

		<action name="storageUsage" class="com.inspur.icpmg.calAndResc.instance.action.CloudServerMgrAction" method="storageUsage">
			<result type="json">
				<param name="root">resultArray[0]</param>
			</result>
		</action>

	</package>
</struts>    